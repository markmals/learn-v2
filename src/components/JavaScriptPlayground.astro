---
export interface Props {
    exampleFile: string;
    height?: string;
}

const { exampleFile, height = '400px' } = Astro.props;

// Read the example file content at build time
let exampleCode = '';
try {
    const examplePath = `../examples/${exampleFile}`;
    const fullPath = new URL(examplePath, import.meta.url).pathname;
    // Use readFile from node:fs in Astro build context
    const fs = await import('node:fs/promises');
    exampleCode = await fs.readFile(fullPath, 'utf-8');
} catch (error) {
    console.error(`Could not read example file: ${exampleFile}`, error);
    exampleCode = '// Example file not found';
}

// Live overlay highlighting removed to avoid caret drift
---

<js-playground data-height={height}>
    <div class="playground-header">
        <div class="playground-tabs">
            <button class="tab-button active" data-tab="editor">Editor</button>
            <button class="tab-button" data-tab="console">Console</button>
        </div>
        <div class="playground-actions">
            <button class="run-button">▶ Run</button>
            <button class="reset-button">↻ Reset</button>
        </div>
    </div>

    <div class="playground-content">
        <div class="tab-content" data-tab="editor">
            <div class="editor-container">
                <textarea class="code-editor" spellcheck="false">{exampleCode}</textarea>
            </div>
        </div>

        <div class="tab-content hidden" data-tab="console">
            <iframe
                class="console-frame"
                title="JS Console"
                sandbox="allow-scripts allow-same-origin"
            ></iframe>
            <!-- Hidden Sandpack iframe mount -->
            <iframe class="sandpack-iframe" title="JS Sandbox" style="display: none" />
        </div>
    </div>
</js-playground>

<style>
    js-playground {
        display: block;
        border: 1px solid var(--sl-color-gray-5);
        border-radius: var(--sl-border-radius);
        overflow: hidden;
        background: var(--sl-color-bg);
        font-family: var(--__sl-font-mono);
        margin: 1rem 0;
        box-shadow: var(--sl-shadow-sm);
    }

    :root[data-theme='dark'] js-playground {
        border-color: var(--sl-color-gray-6);
    }

    .playground-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: var(--sl-color-bg-nav);
        border-bottom: 1px solid var(--sl-color-hairline);
        padding: 0.75rem 1rem;
    }

    .playground-tabs {
        display: flex;
        gap: 0.5rem;
    }

    .tab-button {
        background: var(--sl-color-bg);
        border: 1px solid var(--sl-color-gray-5);
        color: var(--sl-color-text);
        padding: 0.5rem 0.875rem;
        border-radius: var(--sl-border-radius);
        cursor: pointer;
        font-size: var(--sl-text-sm);
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .tab-button:hover {
        background: var(--sl-color-gray-6);
        border-color: var(--sl-color-gray-4);
    }

    .tab-button.active {
        background: var(--sl-color-accent);
        color: var(--sl-color-white);
        border-color: var(--sl-color-accent);
    }

    .playground-actions {
        display: flex;
        gap: 0.5rem;
    }

    .run-button, .reset-button {
        background: var(--sl-color-accent);
        color: var(--sl-color-white);
        border: 1px solid transparent;
        padding: 0 1rem;
        border-radius: var(--sl-border-radius);
        cursor: pointer;
        font-size: var(--sl-text-sm);
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        height: 40px;
        box-sizing: border-box;
        transition: background-color 0.2s ease;
    }

    .run-button:hover, .reset-button:hover {
        background: var(--sl-color-accent-high);
    }

    .reset-button {
        background: var(--sl-color-gray-4);
    }

    .reset-button:hover {
        background: var(--sl-color-gray-3);
    }

    .playground-content {
        position: relative;
        height: var(--playground-height);
    }

    .tab-content {
        height: 100%;
        overflow: hidden;
    }

    .tab-content.hidden {
        display: none;
    }

    .editor-container {
        position: relative;
        width: 100%;
        height: 100%;
        background: var(--sl-color-bg);
    }

    .code-editor {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: none;
        outline: none;
        font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, 'Liberation Mono', monospace;
        font-size: var(--sl-text-sm);
        line-height: 1.7;
        padding: 1rem;
        resize: none;
        background: transparent;
        color: transparent;
        overflow: auto;
        scrollbar-gutter: stable both-edges;
        tab-size: 4;
        z-index: 2;
        caret-color: var(--sl-color-text);
        white-space: pre-wrap;
        word-wrap: break-word;
    }

    .code-editor:focus {
        outline: 2px solid var(--sl-color-accent);
        outline-offset: -2px;
    }

    .code-editor::selection {
        background: rgba(0, 123, 255, 0.3);
    }

    .console-frame {
        width: 100%;
        height: 100%;
        border: none;
        background: var(--sl-color-bg-sidebar);
    }

    :root[data-theme='dark'] .console-frame {
        background: var(--sl-color-black);
    }

    @media (max-width: 768px) {
        .playground-header {
            flex-direction: column;
            gap: 0.75rem;
            align-items: stretch;
        }

        .playground-tabs, .playground-actions {
            justify-content: center;
        }

        .tab-button {
            flex: 1;
            text-align: center;
        }
    }
</style>

<script>
    import { loadSandpackClient } from '@codesandbox/sandpack-client';

    class JSPlayground extends HTMLElement {
        #codeEditor;
        #originalCode;
        #editorFrame;
        #sandpackIframe;
        #sandpack;
        #consoleFrame;

        connectedCallback() {
            this.#codeEditor = this.querySelector('.code-editor');
            this.#editorFrame = this.querySelector('.editor-frame');
            this.#sandpackIframe = this.querySelector('.sandpack-iframe');
            this.#consoleFrame = this.querySelector('.console-frame');
            this.#originalCode = this.#codeEditor.value;

            this.#setupEventListeners();
            this.#setHeight();
            this.#initSandpack();
            this.#initConsoleFrame();
            this.#renderEditorHighlight();
            this.#syncScroll();

            const mo = new MutationObserver(() => {
                this.#renderEditorHighlight();
                // Refresh console theme too
                this.#initConsoleFrame();
            });
            mo.observe(document.documentElement, {
                attributes: true,
                attributeFilter: ['data-theme'],
            });
        }

        #setHeight() {
            const height = this.dataset.height || '400px';
            this.style.setProperty('--playground-height', height);
        }

        #setupEventListeners() {
            // Tab switching
            this.querySelectorAll('.tab-button').forEach((button) => {
                button.addEventListener('click', (e) => {
                    const target = e.target;
                    if (target.dataset.tab) {
                        this.#switchTab(target.dataset.tab);
                    }
                });
            });

            // Run button
            this.querySelector('.run-button')?.addEventListener('click', () => {
                this.#runCode();
            });

            // Reset button
            this.querySelector('.reset-button')?.addEventListener('click', () => {
                this.#resetCode();
            });

            // Content change listeners
            this.#codeEditor.addEventListener('input', () => {
                this.#renderEditorHighlight();
            });
            // Keep highlight in sync while scrolling the textarea
            this.#codeEditor.addEventListener('scroll', () => this.#syncScroll());

            // Keyboard shortcuts
            this.#codeEditor.addEventListener('keydown', (e) => {
                // Ctrl/Cmd + Enter to run
                if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                    e.preventDefault();
                    this.#runCode();
                }

                // Tab handling
                if (e.key === 'Tab') {
                    e.preventDefault();
                    const start = this.#codeEditor.selectionStart;
                    const end = this.#codeEditor.selectionEnd;

                    this.#codeEditor.value = this.#codeEditor.value.substring(0, start) +
                        '    ' +
                        this.#codeEditor.value.substring(end);

                    this.#codeEditor.selectionStart =
                        this.#codeEditor.selectionEnd =
                            start + 4;

                    // Update highlighting after tab insertion
                    this.#renderEditorHighlight();
                }
            });
        }

        async #renderEditorHighlight() {
            const code = this.#codeEditor.value;
            const theme = document.documentElement.getAttribute('data-theme') === 'dark'
                ? 'github-dark'
                : 'github-light';
            try {
                const { codeToHtml } = await import('../lib/shiki-bundle');
                const highlighted = await codeToHtml(code, { lang: 'javascript', theme });
                const fontFamily =
                    'ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace';
                const fontSize = getComputedStyle(document.documentElement)
                    .getPropertyValue('--sl-text-sm');
                const bodyBg = getComputedStyle(document.documentElement).getPropertyValue(
                    '--sl-color-bg',
                );
                const srcdoc = `<!DOCTYPE html><html><head><meta charset="utf-8"><style>
                    html,body{margin:0;height:100%;overflow:auto}
                    *, *::before, *::after{box-sizing:border-box}
                    body{background:${bodyBg};font-family:${fontFamily};font-size:${fontSize};line-height:1.7;}
                    pre{margin:0;padding:1rem;white-space:pre-wrap;word-wrap:break-word;}
                    pre,code,span{font-family:${fontFamily} !important;font-size:${fontSize} !important;line-height:1.7 !important;letter-spacing: normal !important;tab-size:4}
                </style></head><body>${highlighted}</body></html>`;
                if (this.#editorFrame) this.#editorFrame.srcdoc = srcdoc;
                this.#editorFrame?.addEventListener('load', () => this.#syncScroll());
            } catch (error) {
                const safe = this.#highlightJS(
                    code,
                    theme === 'github-dark' ? 'dark' : 'light',
                );
                const srcdoc = `<!DOCTYPE html><html><head><meta charset="utf-8"><style>
                    html,body{margin:0;height:100%;overflow:auto}
                    *, *::before, *::after{box-sizing:border-box}
                    body{background:#fff;font-family:${fontFamily};font-size:${fontSize};line-height:1.7;}
                    pre{margin:0;padding:1rem;white-space:pre-wrap;word-wrap:break-word;}
                    pre,code,span{font-family:${fontFamily} !important;font-size:${fontSize} !important;line-height:1.7 !important;letter-spacing: normal !important;tab-size:4}
                </style></head><body><pre><code>${safe}</code></pre></body></html>`;
                if (this.#editorFrame) this.#editorFrame.srcdoc = srcdoc;
                this.#editorFrame?.addEventListener('load', () => this.#syncScroll());
            }
        }

        #syncScroll() {
            const doc = this.#editorFrame?.contentDocument;
            if (!doc) return;
            const y = this.#codeEditor.scrollTop;
            const x = this.#codeEditor.scrollLeft;
            doc.documentElement.scrollTop = y;
            doc.body.scrollTop = y;
            doc.documentElement.scrollLeft = x;
            doc.body.scrollLeft = x;
        }

        #highlightJS(code, theme) {
            // Simple JavaScript syntax highlighting with theme support
            const colors = theme === 'light'
                ? {
                    comment: '#6a737d',
                    string: '#032f62',
                    keyword: '#d73a49',
                    number: '#005cc5',
                    builtin: '#6f42c1',
                }
                : {
                    comment: '#8b949e',
                    string: '#a5d6ff',
                    keyword: '#ff7b72',
                    number: '#79c0ff',
                    builtin: '#d2a8ff',
                };

            return code
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                // Comments
                .replace(
                    /(\/\/.*$)/gm,
                    `<span style="color: ${colors.comment}; font-style: italic;">$1</span>`,
                )
                .replace(
                    /(\/\*[\s\S]*?\*\/)/gm,
                    `<span style="color: ${colors.comment}; font-style: italic;">$1</span>`,
                )
                // Strings
                .replace(
                    /(['"`])((?:(?!\1)[^\\]|\\.)*)(\1)/g,
                    `<span style="color: ${colors.string};">$1$2$3</span>`,
                )
                // Keywords
                .replace(
                    /\b(const|let|var|function|class|if|else|for|while|do|switch|case|default|break|continue|return|try|catch|finally|throw|async|await|import|export|from|as)\b/g,
                    `<span style="color: ${colors.keyword}; font-weight: 600;">$1</span>`,
                )
                // Numbers
                .replace(
                    /\b(\d+(?:\.\d+)?)\b/g,
                    `<span style="color: ${colors.number};">$1</span>`,
                )
                // Built-ins
                .replace(
                    /\b(console|document|window|Array|Object|String|Number|Boolean|Math|Date|RegExp|Error|Promise|JSON)\b/g,
                    `<span style="color: ${colors.builtin};">$1</span>`,
                );
        }

        async #initSandpack() {
            try {
                // Prepare initial files for Sandpack
                const pkg = { main: 'index.js', dependencies: {} };
                const files = {
                    '/package.json': { code: JSON.stringify(pkg) },
                    '/index.js': { code: this.#codeEditor.value },
                };

                this.#clearConsole();

                this.#sandpack = await loadSandpackClient(
                    this.#sandpackIframe,
                    { files, environment: 'vanilla' },
                    {},
                );

                this.#listenToSandpack();
            } catch (error) {
                console.error('Failed to init Sandpack:', error);
            }
        }

        #listenToSandpack() {
            if (!this.#sandpack) return;
            this.#sandpack.listen((msg) => {
                if (msg.type === 'console') {
                    const level = msg.level || 'log';
                    this.#appendConsole(level, msg.data || []);
                }
                if (msg.type === 'error') {
                    this.#appendConsole('error', [String(msg.error || 'Unknown error')]);
                }
            });
        }

        #initConsoleFrame() {
            if (!this.#consoleFrame) return;
            const bg = getComputedStyle(document.documentElement).getPropertyValue(
                '--sl-color-bg-sidebar',
            );
            const text = getComputedStyle(document.documentElement).getPropertyValue(
                '--sl-color-text',
            );
            const font = getComputedStyle(document.documentElement).getPropertyValue(
                '--__sl-font-mono',
            );
            const size = getComputedStyle(document.documentElement).getPropertyValue(
                '--sl-text-sm',
            );
            const red = getComputedStyle(document.documentElement).getPropertyValue(
                '--sl-color-red',
            );
            const orange = getComputedStyle(document.documentElement).getPropertyValue(
                '--sl-color-orange',
            );
            const blue = getComputedStyle(document.documentElement).getPropertyValue(
                '--sl-color-blue',
            );
            const html = `<!DOCTYPE html><html><head><meta charset="utf-8"><style>
                html,body{margin:0;height:100%}
                body{background:${bg};color:${text};font-family:${font};font-size:${size};line-height:1.7;padding:1rem;white-space:pre-wrap;}
                .console-line{margin-bottom:.5rem;word-break:break-word}
                .console-error{color:${red}}
                .console-warn{color:${orange}}
                .console-info{color:${blue}}
            </style></head><body><div id="output">// Click Run to execute the code</div></body></html>`;
            this.#consoleFrame.srcdoc = html;
        }

        #clearConsole() {
            if (!this.#consoleFrame?.contentDocument) return;
            const out = this.#consoleFrame.contentDocument.getElementById('output');
            if (out) out.innerHTML = '// Click Run to execute the code';
        }

        #appendConsole(level, items) {
            const doc = this.#consoleFrame?.contentDocument;
            if (!doc) return;
            const out = doc.getElementById('output');
            if (!out) return;
            if (out.textContent?.startsWith('// Click Run')) out.innerHTML = '';
            for (const item of items) {
                const line = doc.createElement('div');
                line.className = `console-line console-${level}`;
                try {
                    if (typeof item === 'object') {
                        line.textContent = JSON.stringify(item, null, 2);
                    } else line.textContent = String(item);
                } catch (_) {
                    line.textContent = String(item);
                }
                out.appendChild(line);
            }
        }

        #switchTab(tabName) {
            // Update tab buttons
            this.querySelectorAll('.tab-button').forEach((btn) => {
                btn.classList.remove('active');
            });
            const activeTab = this.querySelector(`[data-tab="${tabName}"]`);
            if (activeTab) {
                activeTab.classList.add('active');
            }

            // Update tab content
            this.querySelectorAll('.tab-content').forEach((content) => {
                content.classList.add('hidden');
            });
            const activeContent = this.querySelector(`.tab-content[data-tab="${tabName}"]`);
            if (activeContent) {
                activeContent.classList.remove('hidden');
            }
        }

        async #runCode() {
            try {
                if (!this.#sandpack) await this.#initSandpack();
                this.#clearConsole();
                this.#sandpack.updateSandbox({
                    files: { '/index.js': { code: this.#codeEditor.value } },
                    entry: '/index.js',
                });
                this.#switchTab('console');
            } catch (error) {
                console.error('Error running code:', error);
            }
        }

        #resetCode() {
            this.#codeEditor.value = this.#originalCode;
            this.#renderEditorHighlight();
            this.#clearConsole();
            if (this.#sandpack) {
                this.#sandpack.updateSandbox({
                    files: { '/index.js': { code: this.#originalCode } },
                    entry: '/index.js',
                });
            }
            this.#switchTab('editor');
        }
    }

    // Define the custom element
    customElements.define('js-playground', JSPlayground);
</script>
